#
# OpenSIPS loadbalancer script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Load Balancer" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4

/* uncomment the following lines to enable debugging */
#debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no


listen=udp:192.168.0.45:5060   # CUSTOMIZE ME


####### Modules Section ########

#set module path
mpath="/lib/opensips/modules/"



#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### MYSQL module
loadmodule "db_mysql.so"

#### AVPOPS module
loadmodule "avpops.so"

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)


#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME


#### Dispatcher Module
## --S1 -- ##
loadmodule "dispatcher.so"
modparam("dispatcher","db_url",
           "mysql://opensips:opensipsrw@localhost/opensips")
modparam("dispatcher","dst_avp","$avp(1)")
modparam("dispatcher","grp_avp","$avp(2)")
modparam("dispatcher","cnt_avp","$avp(3)")
## --/S1-- ##


## --S2 -- ##
#### LOAD BALANCER module
loadmodule "load_balancer.so"
modparam("load_balancer", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME
modparam("load_balancer", "probing_method", "OPTIONS")
modparam("load_balancer", "probing_interval", 30)
## --S2 -- ##





loadmodule "proto_udp.so"




####### Routing Logic ########


# main request routing logic

route{

	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			
			# validate the sequential request against dialog
			if ( $DLG_status!=NULL && !validate_dialog() ) {
				xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
				## exit;
			}
			
			if (is_method("BYE")) {
				# do accounting even if the transaction fails
				do_accounting("log","failed");
			} else if (is_method("INVITE")) {
				# even if in most of the cases is useless, do RR for
				# re-INVITEs alos, as some buggy clients do change route set
				# during the dialog.
				record_route();
			}

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(RELAY);
		} else {
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}

	#### INITIAL REQUESTS

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}


	t_check_trans();

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	record_route();

	## --S3 -- ##
	#Dispatch register requests
        if(is_method("REGISTER")) {
        	if (!ds_select_dst("1", "2","f")) { # over To-URI
			sl_send_reply("500","No route to PBX");
			exit;
		}
		xlog("--- destination selected $du \n");
                t_on_failure("REGISTER_FAILOVER");
                route(RELAY);
        } 
	## --S3 -- ##
	
	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	## --S4 -- ##
	#Load Balance other requests
	if ( !load_balance("1","channel")) {
	
		send_reply("500","No Destination available");
		exit;
	}
	t_on_failure("GW_FAILOVER");
	## --S4 -- ##

	route(RELAY);
}


route[RELAY] {
	if (!t_relay()) {
		sl_reply_error();
	};
	exit;
}


## --S5 -- ##
failure_route[GW_FAILOVER] {
	if (t_was_cancelled()) {
		exit;
	}

	# failure detection with redirect to next available trunk
	if (t_check_status("(408)|([56][0-9][0-9])")) {
		xlog("Failed trunk $rd/$du detected \n");

		
		if ( load_balance("1","channel") ) {
		
			t_on_failure("GW_FAILOVER");
			t_relay();
			exit;
		}
		
		send_reply("500","All GW are down");
	}
}
## --S5 -- ##


local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		
		acc_log_request("200 Dialog Timeout");
		
	}
}

## --S6 -- ##
failure_route[REGISTER_FAILOVER] {
        if (t_was_cancelled()) exit;

        if ( t_check_status( "[56][0-9][0-9]" ) || (t_local_replied("all") && t_check_status("408"))) {
                ds_mark_dst();   #avoid this peer for next dispatching
                if (!ds_next_dst()) {
                        xlog("--- no more destinations available\n");
                        t_reply("503","Service Unavailable");
                        exit;
                }

                xlog("--- trying the new $du destination\n");
                t_on_failure("REGISTER_FAILOVER");
                t_relay();
        }
}
## --S6 -- ##

